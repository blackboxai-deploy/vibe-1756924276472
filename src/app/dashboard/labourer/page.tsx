'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface User {
  id: string;
  phone: string;
  role: string;
  name: string;
  language: string;
  isVerified: boolean;
}

export default function LabourerDashboard() {
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check authentication
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');

    if (!token || !userData) {
      router.push('/login');
      return;
    }

    try {
      const parsedUser = JSON.parse(userData);
      if (parsedUser.role !== 'labourer') {
        router.push('/login');
        return;
      }
      setUser(parsedUser);
    } catch (error) {
      router.push('/login');
      return;
    } finally {
      setLoading(false);
    }
  }, [router]);

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    router.push('/');
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  const translations = {
    en: {
      welcome: 'Welcome to Agriconnect',
      labourerDashboard: 'Agricultural Worker Dashboard',
      greeting: 'Hello',
      verified: 'Verified',
      unverified: 'Unverified',
      quickActions: 'Quick Actions',
      findJobs: 'Find Jobs',
      findJobsDesc: 'Search for agricultural work opportunities',
      myApplications: 'My Applications',
      myApplicationsDesc: 'Track your job applications',
      acceptedJobs: 'Accepted Jobs',
      acceptedJobsDesc: 'View jobs you have been hired for',
      messages: 'Messages',
      messagesDesc: 'Chat with farmers',
      profile: 'Profile',
      profileDesc: 'Update your skills and profile',
      logout: 'Logout',
      comingSoon: 'Coming Soon',
      featureInDevelopment: 'This feature is currently under development and will be available soon.',
    },
    hi: {
      welcome: 'Agriconnect ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
      labourerDashboard: '‡§ï‡•É‡§∑‡§ø ‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
      greeting: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
      verified: '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§',
      unverified: '‡§Ö‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§',
      quickActions: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø',
      findJobs: '‡§®‡•å‡§ï‡§∞‡•Ä ‡§ñ‡•ã‡§ú‡•á‡§Ç',
      findJobsDesc: '‡§ï‡•É‡§∑‡§ø ‡§ï‡§æ‡§Æ ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç',
      myApplications: '‡§Æ‡•á‡§∞‡•á ‡§Ü‡§µ‡•á‡§¶‡§®',
      myApplicationsDesc: '‡§Ö‡§™‡§®‡•á ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Ü‡§µ‡•á‡§¶‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç',
      acceptedJobs: '‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡§æ‡§Ç',
      acceptedJobsDesc: '‡§â‡§® ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§ú‡§ø‡§®‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§æ‡§Æ ‡§™‡§∞ ‡§∞‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à',
      messages: '‡§∏‡§Ç‡§¶‡•á‡§∂',
      messagesDesc: '‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§ö‡•à‡§ü ‡§ï‡§∞‡•á‡§Ç',
      profile: '‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤',
      profileDesc: '‡§Ö‡§™‡§®‡•á ‡§ï‡•å‡§∂‡§≤ ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
      logout: '‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü',
      comingSoon: '‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à',
      featureInDevelopment: '‡§Ø‡§π ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§π‡•à ‡§î‡§∞ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡•Ä‡•§',
    },
    mr: {
      welcome: 'Agriconnect ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§',
      labourerDashboard: '‡§ï‡•É‡§∑‡•Ä ‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞ ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
      greeting: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞',
      verified: '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§',
      unverified: '‡§Ö‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§',
      quickActions: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡•É‡§§‡•Ä',
      findJobs: '‡§®‡•ã‡§ï‡§∞‡•Ä ‡§∂‡•ã‡§ß‡§æ',
      findJobsDesc: '‡§ï‡•É‡§∑‡•Ä ‡§ï‡§æ‡§Æ‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§ß‡•Ä ‡§∂‡•ã‡§ß‡§æ',
      myApplications: '‡§Æ‡§æ‡§ù‡•á ‡§Ö‡§∞‡•ç‡§ú',
      myApplicationsDesc: '‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§®‡•ã‡§ï‡§∞‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§Ç‡§ö‡§æ ‡§Æ‡§æ‡§ó‡•ã‡§µ‡§æ ‡§ò‡•ç‡§Ø‡§æ',
      acceptedJobs: '‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§®‡•ã‡§ï‡§±‡•ç‡§Ø‡§æ',
      acceptedJobsDesc: '‡§ú‡•ç‡§Ø‡§æ ‡§®‡•ã‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§™‡§≤‡•Ä ‡§®‡•á‡§Æ‡§£‡•Ç‡§ï ‡§ù‡§æ‡§≤‡•Ä ‡§Ü‡§π‡•á ‡§§‡•ç‡§Ø‡§æ ‡§™‡§π‡§æ',
      messages: '‡§∏‡§Ç‡§¶‡•á‡§∂',
      messagesDesc: '‡§∂‡•á‡§§‡§ï‡§∞‡•ç‚Äç‡§Ø‡§æ‡§Ç‡§∂‡•Ä ‡§ö‡•Ö‡§ü ‡§ï‡§∞‡§æ',
      profile: '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',
      profileDesc: '‡§Ü‡§™‡§≤‡•Ä ‡§ï‡•å‡§∂‡§≤‡•ç‡§Ø‡•á ‡§Ü‡§£‡§ø ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§æ',
      logout: '‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü',
      comingSoon: '‡§≤‡§µ‡§ï‡§∞‡§ö ‡§Ø‡•á‡§§ ‡§Ü‡§π‡•á',
      featureInDevelopment: '‡§π‡•á ‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø ‡§∏‡§ß‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø ‡§≤‡§µ‡§ï‡§∞‡§ö ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§à‡§≤.',
    }
  };

  const t = translations[user?.language as keyof typeof translations] || translations.en;

  const quickActions = [
    {
      title: t.findJobs,
      description: t.findJobsDesc,
      icon: 'üîç',
      color: 'bg-blue-100 text-blue-800',
      action: () => alert(t.comingSoon)
    },
    {
      title: t.myApplications,
      description: t.myApplicationsDesc,
      icon: 'üìÑ',
      color: 'bg-green-100 text-green-800',
      action: () => alert(t.comingSoon)
    },
    {
      title: t.acceptedJobs,
      description: t.acceptedJobsDesc,
      icon: '‚úÖ',
      color: 'bg-purple-100 text-purple-800',
      action: () => alert(t.comingSoon)
    },
    {
      title: t.messages,
      description: t.messagesDesc,
      icon: 'üí¨',
      color: 'bg-orange-100 text-orange-800',
      action: () => alert(t.comingSoon)
    },
    {
      title: t.profile,
      description: t.profileDesc,
      icon: '‚öôÔ∏è',
      color: 'bg-gray-100 text-gray-800',
      action: () => alert(t.comingSoon)
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-lg">A</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-blue-700">Agriconnect</h1>
                <p className="text-sm text-gray-600">{t.labourerDashboard}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="font-medium">{t.greeting}, {user?.name}</p>
                <Badge variant={user?.isVerified ? 'default' : 'secondary'}>
                  {user?.isVerified ? t.verified : t.unverified}
                </Badge>
              </div>
              
              <Button 
                variant="outline"
                onClick={handleLogout}
                className="text-red-600 border-red-600 hover:bg-red-50"
              >
                {t.logout}
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <Card className="bg-gradient-to-r from-blue-600 to-green-600 text-white">
            <CardContent className="p-6">
              <h2 className="text-2xl font-bold mb-2">{t.welcome}</h2>
              <p className="text-blue-100">
                {user?.language === 'hi' 
                  ? '‡§Ö‡§™‡§®‡•á ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§ï‡•É‡§∑‡§ø ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§ú‡•Ä‡§µ‡§ø‡§ï‡§æ ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§'
                  : user?.language === 'mr'
                  ? '‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§ï‡•å‡§∂‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§ï‡•É‡§∑‡•Ä ‡§ï‡§æ‡§Æ‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§ß‡•Ä ‡§∂‡•ã‡§ß‡§æ ‡§Ü‡§£‡§ø ‡§Ü‡§™‡§≤‡•Ä ‡§â‡§™‡§ú‡•Ä‡§µ‡§ø‡§ï‡§æ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§æ.'
                  : 'Find the best agricultural work opportunities matching your skills and improve your livelihood.'
                }
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold mb-4">{t.quickActions}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {quickActions.map((action, index) => (
              <Card 
                key={index}
                className="cursor-pointer hover:shadow-lg transition-shadow"
                onClick={action.action}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center space-x-3">
                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${action.color.split(' ')[0]} ${action.color.split(' ')[1]}`}>
                      <span className="text-2xl">{action.icon}</span>
                    </div>
                    <div>
                      <CardTitle className="text-lg">{action.title}</CardTitle>
                      <Badge className={action.color}>
                        {t.comingSoon}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <CardDescription>{action.description}</CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Development Notice */}
        <Card className="bg-blue-50 border-blue-200">
          <CardContent className="p-6 text-center">
            <h4 className="text-lg font-semibold text-blue-900 mb-2">{t.comingSoon}</h4>
            <p className="text-blue-700">{t.featureInDevelopment}</p>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}